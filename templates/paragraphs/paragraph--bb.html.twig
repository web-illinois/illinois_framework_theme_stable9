{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set paragraph_bundle = paragraph.bundle|clean_class %}

{# --- Settings derived from fields (using paragraph object) --- #}
{% set width_setting = paragraph.field_bb_content_layer_width.value|default('page') %}
{% set width_setting = width_setting == 'fixed' ? 'page' : width_setting %}
{% set layout_setting = paragraph.field_bb_layout.value|default('left') %}


{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph_bundle,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}
{{ attach_library('illinois_framework_theme_stable9/paragraph-bb') }}

{% block paragraph %}
<div{{ attributes.setAttribute('id', 'paragraph--' ~ paragraph.id()).addClass(classes) }}>
  {% block content %}
  <ilw-content width="{{ width_setting }}">
      {# Render the background image if it exists #}
      {# This respects the formatter and hides it if empty #}
      {{ content.field_bb_background_image }}

      {# Render the content field, which includes title and subtitle #}
      {# This respects the formatter and hides it if empty #}
      {{ content.field_bb_content }}

      {# Render Title and Subtitle using the content variable #}
      {# This respects their formatters and hides them if empty #}
    {% if layout_setting == 'center' and (content.field_bb_title or content.field_bb_subtitle) %}
      <div class="{{ layout_setting }}">
        {{ content.field_bb_title }}
        {{ content.field_bb_subtitle }}
      </div>
    {% else %}
        {{ content.field_bb_title }}
        {{ content.field_bb_subtitle }}
    {% endif %}
    </ilw-content>

    {# --- Render the nested paragraphs field ('field_bb') --- #}
    {# Drupal will now use the template for the referenced paragraphs #}
    {% if content.field_bb %}
      <ilw-grid gap="20px" width="{{ width_setting }}">

        {{ content.field_bb }}

      </ilw-grid>

    {% endif %}
  {% endblock %}
  </div>
{% endblock paragraph %}
