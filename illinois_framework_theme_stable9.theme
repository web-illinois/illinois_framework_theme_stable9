<?php

declare(strict_types=1);

use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\Core\Site\Settings;
use Drupal\Core\Template\Attribute;
use Drupal\paragraphs\ParagraphInterface;


function illinois_framework_theme_stable9_preprocess(&$variables) {
  // Get the current user service.
  $current_user = \Drupal::currentUser();

  // Check if the user is authenticated to dynamically set the login/logout link.
  if ($current_user->isAuthenticated()) {
    // --- USER IS LOGGED IN ---
    // Set the link text to "Logout".
    $variables['login_logout_text'] = t('Logout');
    $variables['login_logout_url'] = Url::fromRoute('user.logout');
  }
  else {
    // --- USER IS LOGGED OUT ---
    // Set the link text to "Login".
    $variables['login_logout_text'] = t('Login');

    // Get the current page path to use as the destination parameter for the redirect.
    $destination = \Drupal::service('redirect.destination')->getAsArray();

    // Get the theme setting for direct Shibboleth login.
    $shibboleth_direct_login = theme_get_setting('if_shibboleth_login_direct');

    // Default SAML status to inactive.
    $saml_is_active = FALSE;
    // First, check if the simplesamlphp_auth module exists before trying to access its configuration.
    if (\Drupal::moduleHandler()->moduleExists('simplesamlphp_auth')) {
      // If it exists, get the configuration and check if it's active.
      $saml_config = \Drupal::config('simplesamlphp_auth.settings');
      $saml_is_active = $saml_config->get('activate');
    }

    // Check if the theme setting is enabled and the SAML module is active for authentication.
    if ($shibboleth_direct_login && $saml_is_active) {
      // The module is enabled and active, so point to the Shibboleth login with the destination.
      $login_url = Url::fromRoute('simplesamlphp_auth.saml_login', [], ['query' => $destination]);
    }
    else {
      // The module is not enabled, so use the standard Drupal login with the destination.
      $login_url = Url::fromRoute('user.login', [], ['query' => $destination]);
    }
    $variables['login_logout_url'] = $login_url;
  }

  // path variables
  // TODO: condense these into a single array like ['path_vars']['var']
  $current_path = \Drupal::service('path.current')->getPath();
  $canoncial_url = Url::fromRoute('<current>', [], ['absolute' => 'true'])->toString();
  $base_path = \Drupal::request()->getHost();
  $base_path_http = \Drupal::request()->getSchemeAndHttpHost();
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $variables['current_uri'] = \Drupal::request()->getRequestUri();
  $variables['canoncial_url'] = $canoncial_url;
  $variables['current_path'] = $current_path;
  $variables['base_path'] = $base_path;
  $variables['base_path_http'] = $base_path_http;
  $variables['base_path_success'] = (array_key_exists('HTTPS', $_SERVER) ? 'https' : 'http').'://'.$_SERVER['HTTP_HOST'].'/';
  $variables['theme_path'] = $theme_path;
  $variables['files_path'] = $base_path_http . '/sites/' . $base_path . '/files/';
  $variables['#attached']['drupalSettings']['google_cse']['google_api'] = Settings::get('google_api', 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');

  // theme variables
  $variables['if_secondary_site_title'] = theme_get_setting('if_secondary_site_title');
  $variables['if_secondary_site_link'] = theme_get_setting('if_secondary_site_link');
  $variables['if_header_links'][0][0] = theme_get_setting('if_header_text_1');
  $variables['if_header_links'][0][1] = theme_get_setting('if_header_link_1');
  $variables['if_header_links'][1][0] = theme_get_setting('if_header_text_2');
  $variables['if_header_links'][1][1] = theme_get_setting('if_header_link_2');
  $variables['if_header_links'][2][0] = theme_get_setting('if_header_text_3');
  $variables['if_header_links'][2][1] = theme_get_setting('if_header_link_3');
  $variables['if_footer_google_translate'] = theme_get_setting('if_footer_google_translate');
  $variables['if_footer']['if_footer_address']['if_footer_address_unit'] = theme_get_setting('if_footer_address_unit');
  $variables['if_footer']['if_footer_address']['if_footer_address_street_one'] = theme_get_setting('if_footer_address_street_one');
  $variables['if_footer']['if_footer_address']['if_footer_address_street_two'] = theme_get_setting('if_footer_address_street_two');
  $variables['if_footer']['if_footer_address']['if_footer_address_city'] = theme_get_setting('if_footer_address_city');
  $variables['if_footer']['if_footer_address']['if_footer_address_state'] = theme_get_setting('if_footer_address_state');
  $variables['if_footer']['if_footer_address']['if_footer_address_zip'] = theme_get_setting('if_footer_address_zip');
  $variables['if_footer']['if_footer_address']['if_footer_address_tel'] = theme_get_setting('if_footer_address_tel');
  $variables['if_footer']['if_footer_address']['if_footer_address_email'] = theme_get_setting('if_footer_address_email');
  $variables['if_footer']['if_footer_social']['if_footer_social_facebook'] = theme_get_setting('if_footer_social_facebook');
  $variables['if_footer']['if_footer_social']['if_footer_social_twitter'] = theme_get_setting('if_footer_social_twitter');
  $variables['if_footer']['if_footer_social']['if_footer_social_instagram'] = theme_get_setting('if_footer_social_instagram');
  $variables['if_footer']['if_footer_social']['if_footer_social_youtube'] = theme_get_setting('if_footer_social_youtube');
  $variables['if_footer']['if_footer_social']['if_footer_social_linkedin'] = theme_get_setting('if_footer_social_linkedin');
  $variables['if_footer_colleges'][0][0] = theme_get_setting('if_footer_college_text_1');
  $variables['if_footer_colleges'][0][1] = theme_get_setting('if_footer_college_link_1');
  $variables['if_footer_colleges'][1][0] = theme_get_setting('if_footer_college_text_2');
  $variables['if_footer_colleges'][1][1] = theme_get_setting('if_footer_college_link_2');
  $variables['if_footer_colleges'][2][0] = theme_get_setting('if_footer_college_text_3');
  $variables['if_footer_colleges'][2][1] = theme_get_setting('if_footer_college_link_3');
  $variables['if_footer_colleges'][3][0] = theme_get_setting('if_footer_college_text_4');
  $variables['if_footer_colleges'][3][1] = theme_get_setting('if_footer_college_link_4');
  $variables['if_footer_colleges'][4][0] = theme_get_setting('if_footer_college_text_5');
  $variables['if_footer_colleges'][4][1] = theme_get_setting('if_footer_college_link_5');
  $variables['if_footer_colleges']['if_footer_colleges_one'] = theme_get_setting('if_footer_colleges_one');


  $variables['if_footer']['if_footer_menu_block_checkbox'] = theme_get_setting('if_footer_menu_block_checkbox');
  $variables['if_subfooter'][0][0] = theme_get_setting('if_subfooter_text_1');
  $variables['if_subfooter'][0][1] = theme_get_setting('if_subfooter_link_1');
  $variables['if_subfooter'][1][0] = theme_get_setting('if_subfooter_text_2');
  $variables['if_subfooter'][1][1] = theme_get_setting('if_subfooter_link_2');
  $variables['if_subfooter'][2][0] = theme_get_setting('if_subfooter_text_3');
  $variables['if_subfooter'][2][1] = theme_get_setting('if_subfooter_link_3');
  $variables['if_subfooter'][3][0] = theme_get_setting('if_subfooter_text_4');
  $variables['if_subfooter'][3][1] = theme_get_setting('if_subfooter_link_4');
  $variables['if_subfooter'][4][0] = theme_get_setting('if_subfooter_text_5');
  $variables['if_subfooter'][4][1] = theme_get_setting('if_subfooter_link_5');
}


/**
 * @file
 * Functions to support theming in the Illinois Framework Theme theme.
 */
function illinois_framework_theme_stable9_theme_suggestions_page_alter(&$suggestions, $vars, $hook) {
  //provide page template suggestions per content type
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}
/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function illinois_framework_theme_stable9_preprocess_html(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function illinois_framework_theme_stable9_preprocess_page(array &$variables): void {
  // this provides the number of paragraphs next to the sidebar for the 'content_page' content type.
  if (
    !isset($variables['node']) ||
    $variables['node']->getType() !== 'content_page'
  ) {
    return;
  }

  $node = $variables['node'];

  // Check if sidebar mode is enabled.
  $has_sidebar = $node->hasField('field_sidebar') &&
    !$node->get('field_sidebar')->isEmpty() &&
    $node->get('field_sidebar')->value === 'sidebar';

  if (!$has_sidebar) {
    // No sidebar - extract body and render it separately.
    // Render the node body if it exists (respecting display settings).
    $body_render = [];
    if ($node->hasField('body') && !$node->get('body')->isEmpty()) {
      // Load the display settings for the 'default' view mode.
      $view_display = \Drupal::entityTypeManager()
        ->getStorage('entity_view_display')
        ->load('node.content_page.default');

      if ($view_display && $view_display->getRenderer('body')) {
        // Build render array using those display settings.
        $body_render = $view_display->getRenderer('body')->view($node->get('body'), ['label' => 'hidden']);
      }
    }

    // Create a separate body variable.
    $variables['page']['body_content'] = $body_render;

    // Remove the node content from page.content so we can render body separately.
    $content_blocks = isset($variables['page']['content']) ? $variables['page']['content'] : [];
    foreach ($content_blocks as $key => $block) {
      // Skip render metadata keys.
      if (strpos($key, '#') === 0) {
        continue;
      }

      // Skip the node content block.
      if (strpos($key, '_content') !== false || $key === 'content' || $key === 'system_main') {
        unset($variables['page']['content'][$key]);
        continue;
      }

      // Also check for node entity type.
      if (isset($block['#node']) || (isset($block['#entity_type']) && $block['#entity_type'] === 'node')) {
        unset($variables['page']['content'][$key]);
        continue;
      }
    }

    // For no sidebar, we only need to render paragraphs in page.content.
    $paragraphs = [];
    if ($node->hasField('field_paragraph')) {
      foreach ($node->get('field_paragraph')->referencedEntities() as $paragraph) {
        $paragraphs[] = $paragraph;
      }
    }

    $paragraph_view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
    foreach ($paragraphs as $i => $para) {
      $variables['page']['content']['paragraph_' . $i] = $paragraph_view_builder->view($para, 'default');
      $variables['page']['content']['paragraph_' . $i]['#weight'] = 100 + $i;
    }

    return;
  }

  // Get the number of paragraphs to display next to the sidebar.
  $paragraph_number = 0;
  if ($node->hasField('field_sidebar_paragraphs') && !$node->get('field_sidebar_paragraphs')->isEmpty()) {
    $paragraph_number = (int) $node->get('field_sidebar_paragraphs')->value;
  }

  // Gather all referenced paragraphs.
  $paragraphs = [];
  if ($node->hasField('field_paragraph')) {
    foreach ($node->get('field_paragraph')->referencedEntities() as $paragraph) {
      $paragraphs[] = $paragraph;
    }
  }

  // Split paragraphs into two groups.
  $sidebar_paragraphs = array_slice($paragraphs, 0, $paragraph_number);
  $full_paragraphs = array_slice($paragraphs, $paragraph_number);

  $paragraph_view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');

  // Render the sidebar paragraphs.
  $render_sidebar = [];
  foreach ($sidebar_paragraphs as $p) {
    $render_sidebar[] = $paragraph_view_builder->view($p, 'default');
  }

  // Render the remaining (full-width) paragraphs.
  $render_full = [];
  foreach ($full_paragraphs as $p) {
    $render_full[] = $paragraph_view_builder->view($p, 'default');
  }

  // Render the node body if it exists (respecting display settings).
  $body_render = [];
  if ($node->hasField('body') && !$node->get('body')->isEmpty()) {
    // Load the display settings for the 'default' view mode.
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('node.content_page.default');

    if ($view_display && $view_display->getRenderer('body')) {
      // Build render array using those display settings.
      $body_render = $view_display->getRenderer('body')->view($node->get('body'), ['label' => 'hidden']);
    }
  }

  // Extract blocks from page.content and remove the node.
  $content_blocks = isset($variables['page']['content']) ? $variables['page']['content'] : [];
  $preserved_blocks = [];

  foreach ($content_blocks as $key => $block) {
    // Skip render metadata keys.
    if (strpos($key, '#') === 0) {
      continue;
    }

    // Skip the node content block - it's typically named with 'content' in the key.
    // Common patterns: 'content', '{theme}_content', 'system_main'
    if (strpos($key, '_content') !== false || $key === 'content' || $key === 'system_main') {
      unset($variables['page']['content'][$key]);
      continue;
    }

    // Also check for node entity type.
    if (isset($block['#node']) || (isset($block['#entity_type']) && $block['#entity_type'] === 'node')) {
      unset($variables['page']['content'][$key]);
      continue;
    }

    $preserved_blocks[$key] = $block;
    // Also remove from original content region.
    unset($variables['page']['content'][$key]);
  }

  // Build a container for main content (body + sidebar paragraphs).
  $main_content = [
    '#type' => 'container',
    '#attributes' => ['class' => ['main-content']],
    '#weight' => 0, // Main content gets weight 0
  ];

  // Add body first.
  if (!empty($body_render)) {
    $main_content['body'] = $body_render;
    $main_content['body']['#weight'] = 0;
  }

  // Add sidebar paragraphs.
  foreach ($render_sidebar as $i => $para) {
    $main_content['paragraph_' . $i] = $para;
    $main_content['paragraph_' . $i]['#weight'] = 10 + $i;
  }

  // Build sidebar_content: blocks + main content in correct order.
  $variables['page']['sidebar_content'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['sidebar-content']],
  ];

  // Add preserved blocks - they keep their original weights from Block UI.
  // Blocks with negative weights will appear before main_content (weight 0).
  // Blocks with positive weights will appear after main_content.
  foreach ($preserved_blocks as $key => $block) {
    $variables['page']['sidebar_content'][$key] = $block;
    // Keep the block's original weight from Block UI
  }

  // Add the main content to sidebar_content.
  $variables['page']['sidebar_content']['main_content'] = $main_content;

  // Build full_width_paragraphs: remaining paragraphs only.
  $variables['page']['full_width_paragraphs'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['full-width-paragraphs']],
  ];

  foreach ($render_full as $i => $para) {
    $variables['page']['full_width_paragraphs']['paragraph_full_' . $i] = $para;
    $variables['page']['full_width_paragraphs']['paragraph_full_' . $i]['#weight'] = $i;
  }
}
/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function illinois_framework_theme_stable9_preprocess_node(array &$variables): void {

}
function illinois_framework_theme_stable9_preprocess_menu(&$variables) {//Add the parent item to the template for the side navigation
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $first = reset($variables['items']);
  if ($first) {
    $item = $first['original_link'];
    // If the first item has a parent, add that parent to the template so we
    // can render it in the same list.
    if ($item?->getParent()) {
      /** @var \Drupal\Core\Utility\LinkGenerator $link_generator */
      $link_generator = \Drupal::service('link_generator');
      $parent = $menu_link_manager->createInstance($item->getParent());
      $variables['parent_name'] = $parent->getTitle();
      $variables['parent_url'] = $parent->getUrlObject();

      // Required for Drupal to manage the aria-current attribute
      $variables['parent_url']->setOption('set_active_class', TRUE);

      $variables['parent_url']->setOption('attributes', ['class' => 'ilw-section-nav--root']);

      // Create the render array we'll use in the template
      $variables['parent_a'] = $link_generator->generate($parent->getTitle(), $variables['parent_url']);
    }
  }
}

function illinois_framework_theme_stable9_preprocess_breadcrumb(&$variables) {// Add the page title to the breadcrumb
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['active']])
      ];
    }
  }
}
function illinois_framework_theme_stable9_preprocess_paragraph(&$variables) {
  $bbContentParagraph = $variables['paragraph'];
  // This code passes the background color setting from the parent
  // paragraph to the child paragraph.

  // Get the parent entity (the container paragraph)
  if (
    $bbContentParagraph->bundle() === 'bb_content' ||
    $bbContentParagraph->bundle() === 'icon_row_content'
  ) {
    $parent = $bbContentParagraph->getParentEntity();
    // Check if the parent exists, is a Paragraph, and is the correct parent type
    if (
      $parent instanceof ParagraphInterface &&
      ($parent->bundle() === 'bb' || $parent->bundle() === 'icon_row')
    ) {
      // Choose the correct field based on parent bundle
      if ($parent->bundle() === 'bb' && $parent->hasField('field_bb_background') && !$parent->get('field_bb_background')->isEmpty()) {
        // Check if the parent has the background field and it's not empty
        $variables['bb_background'] = $parent->get('field_bb_background')->value;
        // Get the raw value from the parent field
      } elseif ($parent->bundle() === 'icon_row' && $parent->hasField('field_icon_row_background') && !$parent->get('field_icon_row_background')->isEmpty()) {
        $variables['bb_background'] = $parent->get('field_icon_row_background')->value;
      } else {
        $variables['bb_background'] = 'white';
      }
    } else {
      $variables['bb_background'] = $parent->bundle();
    }
  }
}
